// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Group group
// swagger:model Group
type Group struct {

	// deadline
	// Required: true
	Deadline *string `json:"deadline"`

	// exchange date
	// Required: true
	ExchangeDate *string `json:"exchangeDate"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// money limit
	// Required: true
	MoneyLimit *float64 `json:"moneyLimit"`
}

// Validate validates this group
func (m *Group) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoneyLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Group) validateDeadline(formats strfmt.Registry) error {

	if err := validate.Required("deadline", "body", m.Deadline); err != nil {
		return err
	}

	return nil
}

func (m *Group) validateExchangeDate(formats strfmt.Registry) error {

	if err := validate.Required("exchangeDate", "body", m.ExchangeDate); err != nil {
		return err
	}

	return nil
}

func (m *Group) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Group) validateMoneyLimit(formats strfmt.Registry) error {

	if err := validate.Required("moneyLimit", "body", m.MoneyLimit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Group) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Group) UnmarshalBinary(b []byte) error {
	var res Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
